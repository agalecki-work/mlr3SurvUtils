#' @title Fine-Gray Competing Risks Model with Cox Proportional Hazards
#'
#' @description
#' A learner for fitting a Fine-Gray competing risks model using Cox proportional hazards.
#' This model estimates the subdistribution hazard for a specified event type in the presence
#' of competing events, incorporating weights if provided.
#'
#' @section Usage:
#' ```
#' learner <- LearnerSurvFineGrayCoxPH$new()
#' ```
#'
#' @section Parameters:
#' - `ties`: Character, method for handling ties in the Cox model. Options are "efron" (default),
#'   "breslow", or "exact".
#' - `iter.max`: Integer, maximum number of iterations for the Cox model fit (default: 200,
#'   range: 1-1000).
#' - `eps`: Numeric, convergence threshold for the Cox model (default: 1e-9, range: 1e-12 to 1e-4).
#' - `robust`: Logical, whether to compute robust variance estimates (default: FALSE).
#' - `target_event`: Event type (index or name) to model as the target; defaults to the second level if NULL.
#' - `singular.ok`: Logical, whether singular predictors are allowed (default: TRUE).
#'
#' @section Predict Types:
#' - `crank`: Continuous ranking (linear predictor).
#' - `lp`: Linear predictor.
#' - `distr`: Survival distribution (as a matrix of survival probabilities).
#'
#' @section Properties:
#' - Supports weights via the `wts` column in the task.
#'
#' @section Methods:
#' - `new()`: Initialize a new instance of the learner.
#'    - No arguments are required; sets up the learner with default parameters.
#' - `train(task)`: Train the model on a survival task.
#' - `predict(task)`: Predict on new data from a trained model.
#'
#' @importFrom R6 R6Class
#' @importFrom mlr3proba LearnerSurv TaskSurv
#' @importFrom mlr3 partition
#' @importFrom paradox ps p_fct p_int p_dbl p_lgl p_uty
#' @importFrom survival finegray coxph survfit coxph.control
#' @export
LearnerSurvFineGrayCoxPH <- R6::R6Class("LearnerSurvFineGrayCoxPH",
  inherit = mlr3proba::LearnerSurv,
  public = list(
    #' @description
    #' Initialize a new Fine-Gray Cox PH learner.
    initialize = function() {
      ps <- paradox::ps(
        ties = p_fct(default = "efron", levels = c("efron", "breslow", "exact"), tags = "train"),
        iter.max = p_int(default = 200L, lower = 1L, upper = 1000L, tags = "train"),
        eps = p_dbl(default = 1e-9, lower = 1e-12, upper = 1e-4, tags = "train"),
        robust = p_lgl(default = FALSE, tags = "train"),
        target_event = p_uty(default = NULL, tags = "train"),
        singular.ok = p_lgl(default = TRUE, tags = "train")
      )
      
      super$initialize(
        id = "surv.finegray_coxph",
        param_set = ps,
        feature_types = c("logical", "integer", "numeric", "factor"),
        predict_types = c("crank", "lp", "distr"),
        properties = "weights",
        packages = c("survival", "distr6", "purrr"),
        label = "Fine-Gray Competing Risks Model with CoxPH"
      )
    }
  ),
  private = list(
    basehaz = NULL,
    
    .train = function(task) {
      pv <- self$param_set$get_values(tags = "train")
      
      # Ensure iter.max is an integer and within bounds
      iter_max <- as.integer(pv$iter.max %||% 200L)
      if (is.na(iter_max) || iter_max < 1L || iter_max > 1000L) {
        stop("Invalid iter.max value: ", iter_max)
      }
      
      # Ensure eps is a numeric value within bounds
      eps_val <- as.numeric(pv$eps %||% 1e-9)
      if (is.na(eps_val) || eps_val < 1e-12 || eps_val > 1e-4) {
        stop("Invalid eps value: ", eps_val)
      }
      
      row_ids <- task$row_ids
      full_data <- as.data.frame(task$backend$data(rows = row_ids, 
                                                  cols = c(task$target_names, task$feature_names)))
      features <- task$feature_names
      if (length(features) == 0) stop("No features provided!")
      
      time_col <- task$target_names[1]
      event_col <- task$target_names[2]
      event_levels <- task$levels()[[event_col]]
      
      full_data$id <- seq_len(nrow(full_data))
      data <- full_data
      
      weights <- NULL
      if ("weights" %in% task$properties) {
        weights_data <- task$weights
        if (is.null(weights_data) || !"weight" %in% names(weights_data)) {
          stop("No weights defined in task")
        }
        all_weights <- weights_data$weight
        all_row_ids <- weights_data$row_id
        weight_map <- setNames(all_weights, all_row_ids)
        weights <- weight_map[as.character(row_ids)]
      }
      
      form <- as.formula(paste("Surv(", time_col, ",", event_col, ") ~", 
                               paste(c(features, "id"), collapse = " + ")))
      if (length(event_levels) < 3) {
        stop("Event status must have at least 3 levels (censored, main event, competing risk)")
      }
      target_event <- if (is.null(pv$target_event)) event_levels[2] else pv$target_event
      
      fg_data <- survival::finegray(form, data = data, etype = target_event, weights = weights)
      
      if ("weights" %in% task$properties) {
        matched_indices <- match(fg_data$id, as.integer(names(weight_map)))
        fg_data$fgwt <- weights[matched_indices]
      }
      
      cox_formula <- as.formula(paste("Surv(fgstart, fgstop, fgstatus) ~", 
                                      paste(features, collapse = " + ")))
      model <- do.call(survival::coxph, 
                       args = c(list(formula = cox_formula, 
                                     data = fg_data, 
                                     weights = fg_data$fgwt,
                                     control = coxph.control(eps = eps_val, iter.max = iter_max),
                                     robust = pv$robust,
                                     singular.ok = pv$singular.ok), 
                                list(ties = pv$ties)))
      
      baseline_data <- as.data.frame(lapply(full_data[features], function(x) {
        if (is.factor(x)) return(factor(levels(x)[1], levels = levels(x)))
        else return(0)
      }))
      basehaz <- survival::survfit(model, newdata = baseline_data)
      private$basehaz <- list(time = basehaz$time, cumhaz = basehaz$cumhaz)
      
      return(model)
    },
    
    .predict = function(task) {
      newdata <- as.data.frame(task$data(rows = task$row_ids, cols = task$feature_names))
      lp <- predict(self$model, newdata = newdata, type = "lp")
      cif <- matrix(NA, nrow = nrow(newdata), ncol = length(private$basehaz$time))
      for (i in seq_along(lp)) {
        cif[i, ] <- 1 - exp(-private$basehaz$cumhaz * exp(lp[i]))
      }
      time_order <- order(private$basehaz$time)
      surv <- 1 - cif[, time_order, drop = FALSE]
      colnames(surv) <- private$basehaz$time[time_order]
      list(crank = lp, lp = lp, distr = surv)
    }
  )
)
