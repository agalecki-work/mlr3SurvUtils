% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/LearnerSurvFineGrayCoxPHTV.R
\name{LearnerSurvFineGrayCoxPHTV}
\alias{LearnerSurvFineGrayCoxPHTV}
\title{Fine-Gray Competing Risks Model with Cox Proportional Hazards and Time-Varying Effects}
\description{
A learner for fitting a Fine-Gray competing risks model using Cox proportional hazards,
with support for fixed covariates and time-varying covariate effects.
}
\section{Usage}{


\if{html}{\out{<div class="sourceCode">}}\preformatted{learner <- LearnerSurvFineGrayCoxPHTV$new()
}\if{html}{\out{</div>}}
}

\section{Parameters}{

\itemize{
\item \code{ties}: Character, method for handling ties in the Cox model. Options are "efron" (default),
"breslow", or "exact".
\item \code{iter.max}: Integer, maximum number of iterations for the Cox model fit (default: 200,
range: 1-1000).
\item \code{eps}: Numeric, convergence threshold for the Cox model (default: 1e-9, range: 1e-12 to 1e-4).
\item \code{robust}: Logical, whether to compute robust variance estimates (default: FALSE).
\item \code{target_event}: Event type (index or name) to model as the target; defaults to the second level if NULL.
\item \code{singular.ok}: Logical, whether singular predictors are allowed (default: TRUE).
\item \code{cov2_names}: Character vector, names of covariates in the task to use as time-varying covariates (default: NULL).
\item \code{tf}: Function, takes a vector of times and returns a matrix of time functions for cov2 (default: identity function).
}
}

\section{Predict Types}{

\itemize{
\item \code{crank}: Continuous ranking (linear predictor).
\item \code{lp}: Linear predictor.
\item \code{distr}: Survival distribution (as a matrix of survival probabilities).
}
}

\section{Properties}{

\itemize{
\item Supports weights via the \code{wts} column in the task.
}
}

\examples{
\dontrun{
library(mlr3)
library(mlr3proba)

# Simulated data
set.seed(10)
ftime <- rexp(200)  # Failure times
fstatus <- factor(sample(0:2, 200, replace = TRUE), 
                  levels = 0:2, 
                  labels = c("censored", "event", "competing"))  # Factor status
cov <- matrix(runif(600), nrow = 200)  # Fixed covariates (cov1)
dimnames(cov)[[2]] <- c("x1", "x2", "x3")
cov2 <- matrix(runif(400), nrow = 200)  # Time-varying covariates (cov2)
dimnames(cov2)[[2]] <- c("z1", "z2")

# Combine into a data frame
data <- data.frame(time = ftime, status = fstatus, cov, cov2)

# Create a multi-state survival task
task <- TaskSurv$new("simulated", backend = data, time = "time", event = "status", type = "mstate")

# Initialize the learner
learner <- LearnerSurvFineGrayCoxPHTV$new()
learner$param_set$values <- list(
  cov2_names = c("z1", "z2"),          # Specify time-varying covariates
  tf = function(t) cbind(log(t + 1), t) # Time functions: log(t+1) for z1, t for z2
)

# Train the model
learner$train(task)

# Predict
pred <- learner$predict(task)
print(pred)
}

}
\section{Super classes}{
\code{\link[mlr3:Learner]{mlr3::Learner}} -> \code{\link[mlr3proba:LearnerSurv]{mlr3proba::LearnerSurv}} -> \code{LearnerSurvFineGrayCoxPHTV}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-LearnerSurvFineGrayCoxPHTV-new}{\code{LearnerSurvFineGrayCoxPHTV$new()}}
\item \href{#method-LearnerSurvFineGrayCoxPHTV-clone}{\code{LearnerSurvFineGrayCoxPHTV$clone()}}
}
}
\if{html}{\out{
<details><summary>Inherited methods</summary>
<ul>
<li><span class="pkg-link" data-pkg="mlr3" data-topic="Learner" data-id="base_learner"><a href='../../mlr3/html/Learner.html#method-Learner-base_learner'><code>mlr3::Learner$base_learner()</code></a></span></li>
<li><span class="pkg-link" data-pkg="mlr3" data-topic="Learner" data-id="encapsulate"><a href='../../mlr3/html/Learner.html#method-Learner-encapsulate'><code>mlr3::Learner$encapsulate()</code></a></span></li>
<li><span class="pkg-link" data-pkg="mlr3" data-topic="Learner" data-id="format"><a href='../../mlr3/html/Learner.html#method-Learner-format'><code>mlr3::Learner$format()</code></a></span></li>
<li><span class="pkg-link" data-pkg="mlr3" data-topic="Learner" data-id="help"><a href='../../mlr3/html/Learner.html#method-Learner-help'><code>mlr3::Learner$help()</code></a></span></li>
<li><span class="pkg-link" data-pkg="mlr3" data-topic="Learner" data-id="predict"><a href='../../mlr3/html/Learner.html#method-Learner-predict'><code>mlr3::Learner$predict()</code></a></span></li>
<li><span class="pkg-link" data-pkg="mlr3" data-topic="Learner" data-id="predict_newdata"><a href='../../mlr3/html/Learner.html#method-Learner-predict_newdata'><code>mlr3::Learner$predict_newdata()</code></a></span></li>
<li><span class="pkg-link" data-pkg="mlr3" data-topic="Learner" data-id="print"><a href='../../mlr3/html/Learner.html#method-Learner-print'><code>mlr3::Learner$print()</code></a></span></li>
<li><span class="pkg-link" data-pkg="mlr3" data-topic="Learner" data-id="reset"><a href='../../mlr3/html/Learner.html#method-Learner-reset'><code>mlr3::Learner$reset()</code></a></span></li>
<li><span class="pkg-link" data-pkg="mlr3" data-topic="Learner" data-id="train"><a href='../../mlr3/html/Learner.html#method-Learner-train'><code>mlr3::Learner$train()</code></a></span></li>
</ul>
</details>
}}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-LearnerSurvFineGrayCoxPHTV-new"></a>}}
\if{latex}{\out{\hypertarget{method-LearnerSurvFineGrayCoxPHTV-new}{}}}
\subsection{Method \code{new()}}{
Initialize a new Fine-Gray Cox PH learner with time-varying effects.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{LearnerSurvFineGrayCoxPHTV$new()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-LearnerSurvFineGrayCoxPHTV-clone"></a>}}
\if{latex}{\out{\hypertarget{method-LearnerSurvFineGrayCoxPHTV-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{LearnerSurvFineGrayCoxPHTV$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
